/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
  mapSerializer,
} from '@lorisleiva/js-core';

// Accounts.
export type ThawDelegatedAccountInstructionAccounts = {
  /** Delegate */
  delegate: Signer;
  /** Token account to thaw */
  tokenAccount: PublicKey;
  /** Edition */
  edition: PublicKey;
  /** Token mint */
  mint: PublicKey;
  /** Token Program */
  tokenProgram?: PublicKey;
};

// Discriminator.
export type ThawDelegatedAccountInstructionDiscriminator = number;
export function getThawDelegatedAccountInstructionDiscriminator(): ThawDelegatedAccountInstructionDiscriminator {
  return 27;
}

// Data.
type ThawDelegatedAccountInstructionData = {
  discriminator: ThawDelegatedAccountInstructionDiscriminator;
};
export function getThawDelegatedAccountInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<{}> {
  const s = context.serializer;
  const discriminator = getThawDelegatedAccountInstructionDiscriminator();
  const serializer: Serializer<ThawDelegatedAccountInstructionData> =
    s.struct<ThawDelegatedAccountInstructionData>(
      [['discriminator', s.u8]],
      'ThawDelegatedAccountInstructionData'
    );
  return mapSerializer(serializer, () => ({ discriminator }));
}

// Instruction.
export function thawDelegatedAccount(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  input: ThawDelegatedAccountInstructionAccounts
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'mplDigitalAsset',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Delegate.
  signers.push(input.delegate);
  keys.push({
    pubkey: input.delegate.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // Token Account.
  keys.push({ pubkey: input.tokenAccount, isSigner: false, isWritable: false });

  // Edition.
  keys.push({ pubkey: input.edition, isSigner: false, isWritable: false });

  // Mint.
  keys.push({ pubkey: input.mint, isSigner: false, isWritable: false });

  // Token Program.
  keys.push({
    pubkey:
      input.tokenProgram ??
      getProgramAddressWithFallback(
        context,
        'splToken',
        'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
      ),
    isSigner: false,
    isWritable: false,
  });

  // Data.
  const data = getThawDelegatedAccountInstructionDataSerializer(
    context
  ).serialize({});

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
