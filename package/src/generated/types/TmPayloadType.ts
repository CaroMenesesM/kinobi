/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  GetDataEnumKind,
  GetDataEnumKindContent,
  PublicKey,
  Serializer,
} from '@lorisleiva/js-core';
import {
  TmLeafInfo,
  TmSeedsVec,
  getTmLeafInfoSerializer,
  getTmSeedsVecSerializer,
} from '.';

export type TmPayloadType =
  | { __kind: 'Pubkey'; fields: { fields: [PublicKey] } }
  | { __kind: 'Seeds'; fields: { fields: [TmSeedsVec] } }
  | { __kind: 'MerkleProof'; fields: { fields: [TmLeafInfo] } }
  | { __kind: 'Number'; fields: { fields: [bigint] } };
export type TmPayloadTypeArgs =
  | { __kind: 'Pubkey'; fields: { fields: [PublicKey] } }
  | { __kind: 'Seeds'; fields: { fields: [TmSeedsVec] } }
  | { __kind: 'MerkleProof'; fields: { fields: [TmLeafInfo] } }
  | { __kind: 'Number'; fields: { fields: [number | bigint] } };

export function getTmPayloadTypeSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<TmPayloadTypeArgs, TmPayloadType> {
  const s = context.serializer;
  return s.dataEnum<TmPayloadType>(
    [
      [
        'Pubkey',
        s.struct<GetDataEnumKindContent<TmPayloadType, 'Pubkey'>>(
          [['fields', s.tuple([s.publicKey])]],
          'Pubkey'
        ),
      ],
      [
        'Seeds',
        s.struct<GetDataEnumKindContent<TmPayloadType, 'Seeds'>>(
          [['fields', s.tuple([getTmSeedsVecSerializer(context)])]],
          'Seeds'
        ),
      ],
      [
        'MerkleProof',
        s.struct<GetDataEnumKindContent<TmPayloadType, 'MerkleProof'>>(
          [['fields', s.tuple([getTmLeafInfoSerializer(context)])]],
          'MerkleProof'
        ),
      ],
      [
        'Number',
        s.struct<GetDataEnumKindContent<TmPayloadType, 'Number'>>(
          [['fields', s.tuple([s.u64])]],
          'Number'
        ),
      ],
    ],
    'PayloadType'
  ) as Serializer<TmPayloadTypeArgs, TmPayloadType>;
}

// Data Enum Helpers.
export function tmPayloadType(
  kind: 'Pubkey',
  data: GetDataEnumKindContent<TmPayloadType, 'Pubkey'>['fields']
): GetDataEnumKind<TmPayloadType, 'Pubkey'>;
export function tmPayloadType(
  kind: 'Seeds',
  data: GetDataEnumKindContent<TmPayloadType, 'Seeds'>['fields']
): GetDataEnumKind<TmPayloadType, 'Seeds'>;
export function tmPayloadType(
  kind: 'MerkleProof',
  data: GetDataEnumKindContent<TmPayloadType, 'MerkleProof'>['fields']
): GetDataEnumKind<TmPayloadType, 'MerkleProof'>;
export function tmPayloadType(
  kind: 'Number',
  data: GetDataEnumKindContent<TmPayloadType, 'Number'>['fields']
): GetDataEnumKind<TmPayloadType, 'Number'>;
export function tmPayloadType<K extends TmPayloadType['__kind']>(
  kind: K,
  data?: any
): TmPayloadType & { __kind: K } {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}
export function isTmPayloadType<K extends TmPayloadType['__kind']>(
  kind: K,
  value: TmPayloadType
): value is TmPayloadType & { __kind: K } {
  return value.__kind === kind;
}
