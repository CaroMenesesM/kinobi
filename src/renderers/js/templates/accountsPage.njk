{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
{{ macros.imports(imports) }}

{{ macros.docblock(definedType.docs) }}
{{ macros.exportType(name, typeDefinition) }}

export async function fetch{{ name }}(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey,
): Promise<Account<{{ name }}>> {
  const maybeAccount = await context.rpc.getAccount(address);
  assertAccountExists(maybeAccount, '{{ name }}');
  return deserialize{{ name }}(context, maybeAccount);
}

export async function safeFetch{{ name }}(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey,
): Promise<Account<{{ name }}> | null> {
  const maybeAccount = await context.rpc.getAccount(address);
  return maybeAccount.exists
    ? deserialize{{ name }}(context, maybeAccount)
    : null;
}

export function deserialize{{ name }}(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount,
): Account<{{ name }}> {
  return deserializeAccount(rawAccount, get{{ name }}Serializer(context));
}

{{ macros.exportSerializer(name, serializer) }}
{% endblock %}
