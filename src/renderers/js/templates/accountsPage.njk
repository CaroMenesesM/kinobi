{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
{{ imports }}

{{ macros.docblock(definedType.docs) }}
export type {{ account.name | pascalCase }} = Account<{{ account.name | pascalCase }}AccountData>;

{{ macros.exportType(account.name | pascalCase + 'AccountData', account.name | pascalCase + 'AccountArgs', typeManifest) }}

export async function fetch{{ account.name | pascalCase }}(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
): Promise<{{ account.name | pascalCase }}> {
  const maybeAccount = await context.rpc.getAccount(publicKey);
  assertAccountExists(maybeAccount, '{{ account.name | pascalCase }}');
  return deserialize{{ account.name | pascalCase }}(context, maybeAccount);
}

export async function safeFetch{{ account.name | pascalCase }}(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey,
): Promise<{{ account.name | pascalCase }} | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey);
  return maybeAccount.exists
    ? deserialize{{ account.name | pascalCase }}(context, maybeAccount)
    : null;
}

export async function get{{ account.name | pascalCase }}GpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>,
  publicKey: PublicKey,
) {
  const s = context.serializer;
  return gpaBuilder<{{ gpaFields.type }}>(context, context.programs.get('{{ program.name | camelCase }}').address, {{ gpaFields.serializers }});
}

export function deserialize{{ account.name | pascalCase }}(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount,
): {{ account.name | pascalCase }} {
  return deserializeAccount(rawAccount, get{{ account.name | pascalCase }}AccountDataSerializer(context));
}

{{ macros.exportSerializer(account.name | pascalCase + 'AccountData', account.name | pascalCase + 'AccountArgs', typeManifest) }}

{% if account.metadata.size !== null %}
export function get{{ account.name | pascalCase }}Size(_context = {}): number {
  return {{ account.metadata.size }};
}
{% else %}
export function get{{ account.name | pascalCase }}Size(
  context: Pick<Context, 'serializer'>
): number | null {
  return get{{ account.name | pascalCase }}AccountDataSerializer(context).fixedSize;
}
{% endif %}

{% if seeds.length > 0 %}
export function find{{ account.name | pascalCase }}Pda(
  context: Pick<Context, 'eddsa' | 'programs'{% if account.hasVariableSeeds %} | 'serializer'{% endif %}>,
  {% if account.hasVariableSeeds %}
    seeds: {
      {% for seed in seeds %}
        {% if seed.kind === 'variable' %}
          /** {{ seed.description }} */
          {{ seed.name | camelCase }}: {{ seed.typeManifest.looseType }};
        {% endif %}
      {% endfor %}
    }
  {% endif %}
): Pda {
  {% if account.hasVariableSeeds %}
    const s = context.serializer;
  {% endif %}
  const programId: PublicKey = context.programs.get('{{ program.metadata.name | camelCase }}').publicKey;
  return context.eddsa.findPda(programId, [
    {% for seed in seeds %}
      {% if seed.kind === 'programId' %}
        programId.bytes,
      {% elif seed.kind === 'literal' %}
        utf8.serialize("{{ seed.value }}"),
      {% else %}
        {{ seed.typeManifest.serializer }}.serialize(seeds.{{ seed.name | camelCase }}),
      {% endif %}
    {% endfor %}
  ]);
}
{% endif %}
{% endblock %}
