/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  EscrowAuthority,
  EscrowAuthorityArgs,
  Key,
  KeyArgs,
  getEscrowAuthoritySerializer,
  getKeySerializer,
} from '../types';
import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
} from '@lorisleiva/js-core';

export type TokenOwnedEscrow = {
  key: Key;
  baseToken: PublicKey;
  authority: EscrowAuthority;
  bump: number;
};
export type TokenOwnedEscrowArgs = {
  key: KeyArgs;
  baseToken: PublicKey;
  authority: EscrowAuthorityArgs;
  bump: number;
};

export async function fetchTokenOwnedEscrow(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<Account<TokenOwnedEscrow>> {
  const maybeAccount = await context.rpc.getAccount(address);
  assertAccountExists(maybeAccount, 'TokenOwnedEscrow');
  return deserializeTokenOwnedEscrow(context, maybeAccount);
}

export async function safeFetchTokenOwnedEscrow(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<Account<TokenOwnedEscrow> | null> {
  const maybeAccount = await context.rpc.getAccount(address);
  return maybeAccount.exists
    ? deserializeTokenOwnedEscrow(context, maybeAccount)
    : null;
}

export function deserializeTokenOwnedEscrow(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Account<TokenOwnedEscrow> {
  return deserializeAccount(rawAccount, getTokenOwnedEscrowSerializer(context));
}

export function getTokenOwnedEscrowSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<TokenOwnedEscrowArgs, TokenOwnedEscrow> {
  const s = context.serializer;
  return s.struct<TokenOwnedEscrow>(
    [
      ['key', getKeySerializer(context)],
      ['baseToken', s.publicKey],
      ['authority', getEscrowAuthoritySerializer(context)],
      ['bump', s.u8],
    ],
    'TokenOwnedEscrow'
  ) as Serializer<TokenOwnedEscrowArgs, TokenOwnedEscrow>;
}
