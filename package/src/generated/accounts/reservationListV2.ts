/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Option,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapSerializer,
} from '@lorisleiva/js-core';
import {
  Reservation,
  ReservationArgs,
  TmKey,
  getReservationSerializer,
  getTmKeySerializer,
} from '../types';

export type ReservationListV2 = Account<ReservationListV2AccountData>;

export type ReservationListV2AccountData = {
  key: TmKey;
  masterEdition: PublicKey;
  supplySnapshot: Option<bigint>;
  reservations: Array<Reservation>;
  totalReservationSpots: bigint;
  currentReservationSpots: bigint;
};

export type ReservationListV2AccountArgs = {
  masterEdition: PublicKey;
  supplySnapshot: Option<number | bigint>;
  reservations: Array<ReservationArgs>;
  totalReservationSpots: number | bigint;
  currentReservationSpots: number | bigint;
};

export async function fetchReservationListV2(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey
): Promise<ReservationListV2> {
  const maybeAccount = await context.rpc.getAccount(publicKey);
  assertAccountExists(maybeAccount, 'ReservationListV2');
  return deserializeReservationListV2(context, maybeAccount);
}

export async function safeFetchReservationListV2(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey
): Promise<ReservationListV2 | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey);
  return maybeAccount.exists
    ? deserializeReservationListV2(context, maybeAccount)
    : null;
}

export async function getReservationListV2GpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>,
  publicKey: PublicKey
) {
  const s = context.serializer;
  return gpaBuilder<{
    key: TmKey;
    masterEdition: PublicKey;
    supplySnapshot: Option<number | bigint>;
    reservations: Array<ReservationArgs>;
    totalReservationSpots: number | bigint;
    currentReservationSpots: number | bigint;
  }>(context, context.programs.get('mplTokenMetadata').address, [
    ['key', getTmKeySerializer(context)],
    ['masterEdition', s.publicKey],
    ['supplySnapshot', s.option(s.u64)],
    ['reservations', s.vec(getReservationSerializer(context))],
    ['totalReservationSpots', s.u64],
    ['currentReservationSpots', s.u64],
  ]);
}

export function deserializeReservationListV2(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): ReservationListV2 {
  return deserializeAccount(
    rawAccount,
    getReservationListV2AccountDataSerializer(context)
  );
}

export function getReservationListV2AccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<ReservationListV2AccountArgs, ReservationListV2AccountData> {
  const s = context.serializer;
  return mapSerializer<
    ReservationListV2AccountArgs,
    ReservationListV2AccountData,
    ReservationListV2AccountData
  >(
    s.struct<ReservationListV2AccountData>(
      [
        ['key', getTmKeySerializer(context)],
        ['masterEdition', s.publicKey],
        ['supplySnapshot', s.option(s.u64)],
        ['reservations', s.vec(getReservationSerializer(context))],
        ['totalReservationSpots', s.u64],
        ['currentReservationSpots', s.u64],
      ],
      'ReservationListV2'
    ),
    (value) => ({ ...value, key: 5 } as ReservationListV2AccountData)
  ) as Serializer<ReservationListV2AccountArgs, ReservationListV2AccountData>;
}

export function getReservationListV2Size(
  context: Pick<Context, 'serializer'>
): number | null {
  return getReservationListV2AccountDataSerializer(context).fixedSize;
}
