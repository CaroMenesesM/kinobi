{# Write a docblock from an array of strings. #}
{% macro docblock(docs) %}
{%- if docs.length === 1 -%}
/** {{ docs[0] }} */
{%- elif docs.length > 1 -%}
/**
{% for doc in docs %}
 * {{ doc }}
{% endfor %}
 */
{% endif %}
{% endmacro %}

{# Import dependencies from provided modules. #}
{% macro imports(importMap, moduleMap = {}) %}
{%- if not importMap.isEmpty() -%}
{{ importMap.toString(moduleMap) }}
{% endif %}
{% endmacro %}

{# Export a type or an enum. #}
{% macro exportType(name, typeDefinition) %}
{%- if typeDefinition.isEnum -%}
export enum {{ name }} {{ typeDefinition.type }};
{%- else -%}
export type {{ name }} = {{ typeDefinition.type }};
{% endif %}
{% endmacro %}

{# Export a serializer. #}
{% macro exportSerializer(name, serializer) %}
export function get{{ name }}Serializer(context: Pick<Context, 'serializer'>): Serializer<{{ name }}> {
  const s = context.serializer;
  return {{ serializer.code }};
}
export function serialize{{ name }}(context: Pick<Context, 'serializer'>, value: {{ name }}): Uint8Array {
  return get{{ name }}Serializer(context).serialize(value);
}
export function deserialize{{ name }}(context: Pick<Context, 'serializer'>, buffer: Uint8Array, offset?: number): [{{ name }}, number] {
  return get{{ name }}Serializer(context).deserialize(buffer, offset);
}
{% endmacro %}
