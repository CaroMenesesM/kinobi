/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  ReservationV1,
  TmKey,
  getReservationV1Serializer,
  getTmKeySerializer,
} from '../types';
import {
  Account,
  Context,
  Option,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
} from '@lorisleiva/js-core';

export type ReservationListV1 = {
  key: TmKey;
  masterEdition: PublicKey;
  supplySnapshot: Option<bigint>;
  reservations: Array<ReservationV1>;
};
export type ReservationListV1Args = {
  key: TmKey;
  masterEdition: PublicKey;
  supplySnapshot: Option<number | bigint>;
  reservations: Array<ReservationV1>;
};

export async function fetchReservationListV1(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<Account<ReservationListV1>> {
  const maybeAccount = await context.rpc.getAccount(address);
  assertAccountExists(maybeAccount, 'ReservationListV1');
  return deserializeReservationListV1(context, maybeAccount);
}

export async function safeFetchReservationListV1(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<Account<ReservationListV1> | null> {
  const maybeAccount = await context.rpc.getAccount(address);
  return maybeAccount.exists
    ? deserializeReservationListV1(context, maybeAccount)
    : null;
}

export function deserializeReservationListV1(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Account<ReservationListV1> {
  return deserializeAccount(
    rawAccount,
    getReservationListV1Serializer(context)
  );
}

export function getReservationListV1Serializer(
  context: Pick<Context, 'serializer'>
): Serializer<ReservationListV1Args, ReservationListV1> {
  const s = context.serializer;
  return s.struct<ReservationListV1>(
    [
      ['key', getTmKeySerializer(context)],
      ['masterEdition', s.publicKey],
      ['supplySnapshot', s.option(s.u64)],
      ['reservations', s.vec(getReservationV1Serializer(context))],
    ],
    'ReservationListV1'
  ) as Serializer<ReservationListV1Args, ReservationListV1>;
}
