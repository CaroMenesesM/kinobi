/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
  mapSerializer,
} from '@lorisleiva/js-core';

// Accounts.
export type SignMetadataInstructionAccounts = {
  /** Metadata (pda of ['metadata', program id, mint id]) */
  metadata: PublicKey;
  /** Creator */
  creator: Signer;
};

// Discriminator.
export type SignMetadataInstructionDiscriminator = number;
export function getSignMetadataInstructionDiscriminator(): SignMetadataInstructionDiscriminator {
  return 7;
}

// Data.
type SignMetadataInstructionData = {
  discriminator: SignMetadataInstructionDiscriminator;
};
export function getSignMetadataInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<{}> {
  const s = context.serializer;
  const discriminator = getSignMetadataInstructionDiscriminator();
  const serializer: Serializer<SignMetadataInstructionData> =
    s.struct<SignMetadataInstructionData>(
      [['discriminator', s.u8]],
      'SignMetadataInstructionData'
    );
  return mapSerializer(serializer, () => ({ discriminator }));
}

// Instruction.
export function signMetadata(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  input: SignMetadataInstructionAccounts
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'mplDigitalAsset',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Metadata.
  keys.push({ pubkey: input.metadata, isSigner: false, isWritable: false });

  // Creator.
  signers.push(input.creator);
  keys.push({
    pubkey: input.creator.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // Data.
  const data = getSignMetadataInstructionDataSerializer(context).serialize({});

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
