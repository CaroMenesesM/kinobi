{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
{{ imports }}

{{ macros.docblock(definedType.docs) }}
export type {{ name }} = Account<{{ name }}AccountData>;

{{ macros.exportType(name + 'AccountData', name + 'AccountArgs', typeManifest) }}

export async function fetch{{ name }}(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey,
): Promise<{{ name }}> {
  const maybeAccount = await context.rpc.getAccount(address);
  assertAccountExists(maybeAccount, '{{ name }}');
  return deserialize{{ name }}(context, maybeAccount);
}

export async function safeFetch{{ name }}(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey,
): Promise<{{ name }} | null> {
  const maybeAccount = await context.rpc.getAccount(address);
  return maybeAccount.exists
    ? deserialize{{ name }}(context, maybeAccount)
    : null;
}

export function deserialize{{ name }}(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount,
): {{ name }} {
  return deserializeAccount(rawAccount, get{{ name }}AccountDataSerializer(context));
}

{{ macros.exportSerializer(name + 'AccountData', name + 'AccountArgs', typeManifest) }}

{% if account.metadata.size !== null %}
export function get{{ name }}Size(_context = {}): number {
  return {{ account.metadata.size }};
}
{% else %}
export function get{{ name }}Size(
  context: Pick<Context, 'serializer'>
): number | null {
  return get{{ name }}AccountDataSerializer(context).fixedSize;
}
{% endif %}

{% if seeds.length > 0 %}
export function find{{ name }}Pda(
  context: {
    {% if account.hasVariableSeeds %}serializer: Context['serializer'];{% endif %}
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  {% if account.hasVariableSeeds %}
    seeds: {
      {% for seed in seeds %}
        {% if seed.kind === 'variable' %}
          /** {{ seed.description }} */
          {{ seed.name }}: {{ seed.typeManifest.looseType }};
        {% endif %}
      {% endfor %}
    }
  {% endif %}
): Pda {
  {% if account.hasVariableSeeds %}
    const s = context.serializer;
  {% endif %}
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    '{{ program.metadata.name }}',
    '{{ program.metadata.address }}'
  );
  return context.eddsa.findPda(programId, [
    {% for seed in seeds %}
      {% if seed.kind === 'programId' %}
        programId.bytes,
      {% elif seed.kind === 'literal' %}
        utf8.serialize("{{ seed.value }}"),
      {% else %}
        {{ seed.typeManifest.serializer }}.serialize(seeds.{{ seed.name }}),
      {% endif %}
    {% endfor %}
  ]);
}
{% endif %}
{% endblock %}
