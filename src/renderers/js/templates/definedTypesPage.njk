{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
{{ macros.imports(imports, { types: '.' }) }}

{{ macros.docblock(definedType.docs) }}
{{ macros.exportType(name, typeDefinition) }}

{{ macros.exportSerializer(name, serializer) }}

{% if definedType.type.nodeClass === 'TypeEnumNode' and definedType.type.isDataEnum() %}
// Data Enum Helpers.
{% for variant in definedType.type.variants %}
{% if variant.kind === 'struct' %}
export function create{{ name }}(kind: '{{ variant.name }}', data: Omit<{{ name }} & { __kind: '{{ variant.name }}' }, '__kind'>): {{ name }} & { __kind: '{{ variant.name }}' };
{% elif variant.kind === 'tuple' %}
export function create{{ name }}(kind: '{{ variant.name }}', data: Omit<{{ name }} & { __kind: '{{ variant.name }}' }, '__kind'>['fields']): {{ name }} & { __kind: '{{ variant.name }}' };
{% else %}
export function create{{ name }}(kind: '{{ variant.name }}'): {{ name }} & { __kind: '{{ variant.name }}' };
{% endif %}
{% endfor %}
export function create{{ name }}<K extends {{ name }}['__kind']>(
  kind: K,
  data?: any,
): {{ name }} & { __kind: K } {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...data };
}
export function is{{ name }}<K extends {{ name }}['__kind']>(
  kind: K,
  value: {{ name }},
): value is {{ name }} & { __kind: K } {
  return value.__kind === kind;
};
{% endif %}
{% endblock %}
