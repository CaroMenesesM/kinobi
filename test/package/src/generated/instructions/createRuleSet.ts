/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  Pda,
  PublicKey,
  Serializer,
  Signer,
  TransactionBuilder,
  checkForIsWritableOverride as isWritable,
  mapSerializer,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  TaCreateArgs,
  TaCreateArgsArgs,
  getTaCreateArgsSerializer,
} from '../types';

// Accounts.
export type CreateRuleSetInstructionAccounts = {
  /** Payer and creator of the RuleSet */
  payer?: Signer;
  /** The PDA account where the RuleSet is stored */
  ruleSetPda: Pda;
  /** System program */
  systemProgram?: PublicKey;
};

// Arguments.
export type CreateRuleSetInstructionData = {
  discriminator: number;
  createArgs: TaCreateArgs;
  ruleSetBump: number;
};

export type CreateRuleSetInstructionDataArgs = {
  createArgs: TaCreateArgsArgs;
  ruleSetBump: number;
};

export function getCreateRuleSetInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<CreateRuleSetInstructionDataArgs, CreateRuleSetInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    CreateRuleSetInstructionDataArgs,
    CreateRuleSetInstructionData,
    CreateRuleSetInstructionData
  >(
    s.struct<CreateRuleSetInstructionData>(
      [
        ['discriminator', s.u8()],
        ['createArgs', getTaCreateArgsSerializer(context)],
        ['ruleSetBump', s.u8()],
      ],
      { description: 'CreateRuleSetInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 0 } as CreateRuleSetInstructionData)
  ) as Serializer<
    CreateRuleSetInstructionDataArgs,
    CreateRuleSetInstructionData
  >;
}

// Instruction.
export function createRuleSet(
  context: Pick<Context, 'serializer' | 'programs' | 'payer'>,
  input: CreateRuleSetInstructionAccounts &
    Omit<CreateRuleSetInstructionDataArgs, 'ruleSetBump'>
): TransactionBuilder {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplTokenAuthRules',
    'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'
  );

  // Resolved accounts.
  const payerAccount = input.payer ?? context.payer;
  const ruleSetPdaAccount = input.ruleSetPda;
  const systemProgramAccount = input.systemProgram ?? {
    ...context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    ),
    isWritable: false,
  };

  // Payer.
  signers.push(payerAccount);
  keys.push({
    pubkey: payerAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(payerAccount, true),
  });

  // Rule Set Pda.
  keys.push({
    pubkey: ruleSetPdaAccount,
    isSigner: false,
    isWritable: isWritable(ruleSetPdaAccount, true),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Data.
  const data = getCreateRuleSetInstructionDataSerializer(context).serialize({
    ...input,
    ruleSetBump: ruleSetPdaAccount.bump,
  });

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
