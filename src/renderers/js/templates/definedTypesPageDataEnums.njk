{% if definedType.type.nodeClass === 'TypeEnumNode' and definedType.type.isDataEnum() %}
// Data Enum Helpers.
{% for variant in definedType.type.variants %}
{% if variant.nodeClass === 'TypeEnumStructVariantNode' %}
export function {{ camelCaseName }}(kind: '{{ variant.name }}', data: GetDataEnumKindContent<{{ name }}, '{{ variant.name }}'>): GetDataEnumKind<{{ name }}, '{{ variant.name }}'>;
{% elif variant.nodeClass === 'TypeEnumTupleVariantNode' %}
export function {{ camelCaseName }}(kind: '{{ variant.name }}', data: GetDataEnumKindContent<{{ name }}, '{{ variant.name }}'>['fields']): GetDataEnumKind<{{ name }}, '{{ variant.name }}'>;
{% else %}
export function {{ camelCaseName }}(kind: '{{ variant.name }}'): GetDataEnumKind<{{ name }}, '{{ variant.name }}'>;
{% endif %}
{% endfor %}
export function {{ camelCaseName }}<K extends {{ name }}['__kind']>(
  kind: K,
  data?: any,
): {{ name }} & { __kind: K } {
  return Array.isArray(data) ? { __kind: kind, fields: data } : { __kind: kind, ...(data ?? {}) };
}
export function is{{ name }}<K extends {{ name }}['__kind']>(
  kind: K,
  value: {{ name }},
): value is {{ name }} & { __kind: K } {
  return value.__kind === kind;
};
{% endif %}
