/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  DelegateRole,
  TmKey,
  getDelegateRoleSerializer,
  getTmKeySerializer,
} from '../types';
import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
} from '@lorisleiva/js-core';

export type DelegateRecord = { key: TmKey; role: DelegateRole; bump: number };

export async function fetchDelegateRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<Account<DelegateRecord>> {
  const maybeAccount = await context.rpc.getAccount(address);
  assertAccountExists(maybeAccount, 'DelegateRecord');
  return deserializeDelegateRecord(context, maybeAccount);
}

export async function safeFetchDelegateRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<Account<DelegateRecord> | null> {
  const maybeAccount = await context.rpc.getAccount(address);
  return maybeAccount.exists
    ? deserializeDelegateRecord(context, maybeAccount)
    : null;
}

export function deserializeDelegateRecord(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Account<DelegateRecord> {
  return deserializeAccount(rawAccount, getDelegateRecordSerializer(context));
}

export function getDelegateRecordSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<DelegateRecord> {
  const s = context.serializer;
  return s.struct<DelegateRecord>(
    [
      ['key', getTmKeySerializer(context)],
      ['role', getDelegateRoleSerializer(context)],
      ['bump', s.u8],
    ],
    'DelegateRecord'
  );
}
