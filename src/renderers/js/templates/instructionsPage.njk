{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
{{ macros.imports(imports) }}

{% include "InstructionsPageAccounts.njk" %}
{% include "InstructionsPageArgs.njk" %}

// Instruction.
export function {{ camelCaseName }}(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  accounts: {{ name }}InstructionAccounts,
  args: {{ name }}InstructionArgs,
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  {% for account in accounts %}
  {% set isWritableString = 'true' if account.isWritable else 'false' %}
  // {{ account.titleCaseName }}{% if account.isOptional %} (optional){% endif %}.
  {% if account.isOptional %}
  if (accounts.{{ account.name }}) {
  {% endif %}
    {% if account.isOptionalSigner %}
    if (isSigner(accounts.{{ account.name }})) {
      signers.push(accounts.{{ account.name }});
      keys.push({
        pubkey: accounts.{{ account.name }}.publicKey,
        isSigner: true,
        isWritable: {{ isWritableString }},
      });
    } else {
      keys.push({
        pubkey: accounts.{{ account.name }},
        isSigner: false,
        isWritable: {{ isWritableString }},
      });
    }
    {% elif account.isSigner  %}
    signers.push(accounts.{{ account.name }});
    keys.push({ pubkey: accounts.{{ account.name }}.publicKey, isSigner: true, isWritable: {{ isWritableString }} });
    {% else %}
    keys.push({ pubkey: accounts.{{ account.name }}, isSigner: false, isWritable: {{ isWritableString }} });
    {% endif %}
  {% if account.isOptional %}
  }
  {% endif %}

  {% endfor %}
  // Program ID.
  const programId: PublicKey = context.programs
    ? context.programs.get('{{ instruction.program.name }}')
    : context.eddsa.createPublicKey('{{ instruction.program.address }}');

  // Data.
  const data = new Uint8Array(); // TODO

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  }
}
{% endblock %}
