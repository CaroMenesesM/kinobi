/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
  mapSerializer,
} from '@lorisleiva/js-core';
import {
  CandyMachineData,
  CandyMachineDataArgs,
  getCandyMachineDataSerializer,
} from '../types';

// Accounts.
export type InitializeInstructionAccounts = {
  candyMachine: PublicKey;
  authorityPda: PublicKey;
  authority?: PublicKey;
  payer?: Signer;
  collectionMetadata: PublicKey;
  collectionMint: PublicKey;
  collectionMasterEdition: PublicKey;
  collectionUpdateAuthority: Signer;
  collectionAuthorityRecord: PublicKey;
  tokenMetadataProgram: PublicKey;
  systemProgram?: PublicKey;
};

// Arguments.
export type InitializeInstructionData = {
  discriminator: Array<number>;
  data: CandyMachineData;
};

export type InitializeInstructionArgs = { data: CandyMachineDataArgs };

export function getInitializeInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<InitializeInstructionArgs, InitializeInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    InitializeInstructionArgs,
    InitializeInstructionData,
    InitializeInstructionData
  >(
    s.struct<InitializeInstructionData>(
      [
        ['discriminator', s.array(s.u8, 8)],
        ['data', getCandyMachineDataSerializer(context)],
      ],
      'initializeInstructionArgs'
    ),
    (value) =>
      ({
        discriminator: [175, 175, 109, 31, 13, 152, 155, 237],
        ...value,
      } as InitializeInstructionData)
  ) as Serializer<InitializeInstructionArgs, InitializeInstructionData>;
}

// Instruction.
export function initialize(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    identity: Context['identity'];
    payer: Context['payer'];
    programs?: Context['programs'];
  },
  input: InitializeInstructionAccounts & InitializeInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'mplCandyMachineCore',
    'CndyV3LdqHUfDLmE5naZjVN8rBZz4tqhdefbAnjHG3JR'
  );

  // Candy Machine.
  keys.push({ pubkey: input.candyMachine, isSigner: false, isWritable: true });

  // Authority Pda.
  keys.push({ pubkey: input.authorityPda, isSigner: false, isWritable: true });

  // Authority.
  if (input.authority) {
    keys.push({ pubkey: input.authority, isSigner: false, isWritable: false });
  } else {
    keys.push({
      pubkey: context.identity.publicKey,
      isSigner: false,
      isWritable: false,
    });
  }

  // Payer.
  if (input.payer) {
    signers.push(input.payer);
    keys.push({
      pubkey: input.payer.publicKey,
      isSigner: true,
      isWritable: false,
    });
  } else {
    signers.push(context.payer);
    keys.push({
      pubkey: context.payer.publicKey,
      isSigner: true,
      isWritable: false,
    });
  }

  // Collection Metadata.
  keys.push({
    pubkey: input.collectionMetadata,
    isSigner: false,
    isWritable: false,
  });

  // Collection Mint.
  keys.push({
    pubkey: input.collectionMint,
    isSigner: false,
    isWritable: false,
  });

  // Collection Master Edition.
  keys.push({
    pubkey: input.collectionMasterEdition,
    isSigner: false,
    isWritable: false,
  });

  // Collection Update Authority.
  signers.push(input.collectionUpdateAuthority);
  keys.push({
    pubkey: input.collectionUpdateAuthority.publicKey,
    isSigner: true,
    isWritable: true,
  });

  // Collection Authority Record.
  keys.push({
    pubkey: input.collectionAuthorityRecord,
    isSigner: false,
    isWritable: true,
  });

  // Token Metadata Program.
  keys.push({
    pubkey: input.tokenMetadataProgram,
    isSigner: false,
    isWritable: false,
  });

  // System Program.
  if (input.systemProgram) {
    keys.push({
      pubkey: input.systemProgram,
      isSigner: false,
      isWritable: false,
    });
  } else {
    keys.push({
      pubkey: getProgramAddressWithFallback(
        context,
        'splSystem',
        '11111111111111111111111111111111'
      ),
      isSigner: false,
      isWritable: false,
    });
  }

  // Data.
  const data = getInitializeInstructionDataSerializer(context).serialize(input);

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
