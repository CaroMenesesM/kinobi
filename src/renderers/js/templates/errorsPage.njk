{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
{{ macros.imports(imports) }}

const codeToErrorMap: Map<number, () => ErrorWithCode> = new Map();
const nameToErrorMap: Map<string, () => ErrorWithCode> = new Map();

{% for error in program.errors | sort(false, false, 'code') %}
{{ macros.docblock(error.docs) -}}
export class {{ error.name }}Error extends Error {
  readonly code: number = 0x{{ error.code.toString(16) }}; // {{ error.code }}
  readonly name: string = '{{ error.name }}';
  constructor() {
    super('{{ error.message }}');
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, {{ error.name }}Error);
    }
  }
}

codeToErrorMap.set(0x{{ error.code.toString(16) }}, () => new {{ error.name }}Error());
nameToErrorMap.set('{{ error.name }}', () => new {{ error.name }}Error());

{% endfor %}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export function errorFromCode(code: number): ErrorWithCode | null {
  return codeToErrorMap.get(code)?.() ?? null;
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export function errorFromName(name: string): ErrorWithCode | null {
  return nameToErrorMap.get(name)?.() ?? null;
}
{% endblock %}
