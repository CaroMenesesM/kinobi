/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  mapSerializer,
} from '@lorisleiva/js-core';
import {
  DelegateRole,
  TmKey,
  getDelegateRoleSerializer,
  getTmKeySerializer,
} from '../types';

export type DelegateRecord = Account<DelegateRecordAccountData>;

export type DelegateRecordAccountData = {
  key: TmKey;
  role: DelegateRole;
  bump: number;
};

export type DelegateRecordAccountArgs = { role: DelegateRole; bump: number };

export async function fetchDelegateRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey
): Promise<DelegateRecord> {
  const maybeAccount = await context.rpc.getAccount(publicKey);
  assertAccountExists(maybeAccount, 'DelegateRecord');
  return deserializeDelegateRecord(context, maybeAccount);
}

export async function safeFetchDelegateRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  publicKey: PublicKey
): Promise<DelegateRecord | null> {
  const maybeAccount = await context.rpc.getAccount(publicKey);
  return maybeAccount.exists
    ? deserializeDelegateRecord(context, maybeAccount)
    : null;
}

export async function getDelegateRecordGpaBuilder(
  context: Pick<Context, 'rpc' | 'serializer' | 'programs'>,
  publicKey: PublicKey
) {
  const s = context.serializer;
  return gpaBuilder<{ key: TmKey; role: DelegateRole; bump: number }>(
    context,
    context.programs.get('mplTokenMetadata').publicKey,
    [
      ['key', getTmKeySerializer(context)],
      ['role', getDelegateRoleSerializer(context)],
      ['bump', s.u8],
    ]
  ).whereField('key', 11);
}

export function deserializeDelegateRecord(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): DelegateRecord {
  return deserializeAccount(
    rawAccount,
    getDelegateRecordAccountDataSerializer(context)
  );
}

export function getDelegateRecordAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<DelegateRecordAccountArgs, DelegateRecordAccountData> {
  const s = context.serializer;
  return mapSerializer<
    DelegateRecordAccountArgs,
    DelegateRecordAccountData,
    DelegateRecordAccountData
  >(
    s.struct<DelegateRecordAccountData>(
      [
        ['key', getTmKeySerializer(context)],
        ['role', getDelegateRoleSerializer(context)],
        ['bump', s.u8],
      ],
      'DelegateRecord'
    ),
    (value) => ({ ...value, key: 11 } as DelegateRecordAccountData)
  ) as Serializer<DelegateRecordAccountArgs, DelegateRecordAccountData>;
}

export function getDelegateRecordSize(_context = {}): number {
  return 3;
}
