export function decode{{ pascalCaseName }}<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): {{ pascalCaseName }}<TAddress> {
  return decodeAccount(encodedAccount, {{ decoderFunction }});
}

export async function fetch{{ pascalCaseName }}<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<{{ pascalCaseName }}<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return decode{{ pascalCaseName }}(maybeAccount);
}

export async function safeFetch{{ pascalCaseName }}<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<{{ pascalCaseName }}<TAddress> | null> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return maybeAccount.exists
    ? decode{{ pascalCaseName }}(maybeAccount)
    : null;
}

export async function fetchAll{{ pascalCaseName }}(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<{{ pascalCaseName }}[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount);
    return decode{{ pascalCaseName }}(maybeAccount);
  });
}

export async function safeFetchAll{{ pascalCaseName }}(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<{{ pascalCaseName }}[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => decode{{ pascalCaseName }}(maybeAccount as EncodedAccount));
}
