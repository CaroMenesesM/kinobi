{% extends "layout.njk" %}
{% import "macros.njk" as macros %}

{% block main %}
{{ macros.imports(imports) }}

{% include "instructionsPageAccounts.njk" %}
{% include "instructionsPageArgs.njk" %}
{% include "instructionsPageDiscriminator.njk" %}
{% include "instructionsPageData.njk" %}

// Instruction.
export function {{ camelCaseName }}(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  {% if instruction.hasAccounts %}
  accounts: {{ name }}InstructionAccounts,
  {% endif %}
  {% if instruction.hasArgs %}
  args: {{ name }}InstructionArgs,
  {% endif %}
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(context, '{{ program.namespacedName }}', '{{ program.metadata.address }}');

  {% include "instructionsPageAccountMetas.njk" -%}

  // Data.
  {% if instruction.hasArgs %}
  const data = get{{ name }}InstructionDataSerializer(context).serialize(args);
  {% elif instruction.hasDiscriminator %}
  const data = get{{ name }}InstructionDataSerializer(context).serialize({});
  {% else %}
  const data = new Uint8Array();
  {% endif %}

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  }
}
{% endblock %}
