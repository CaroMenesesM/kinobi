/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Key, getKeySerializer } from '../types';
import {
  Account,
  Context,
  Option,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
} from '@lorisleiva/js-core';

export type MasterEditionV2 = {
  key: Key;
  supply: bigint;
  maxSupply: Option<bigint>;
};
export type MasterEditionV2Args = {
  key: Key;
  supply: number | bigint;
  maxSupply: Option<number | bigint>;
};

export async function fetchMasterEditionV2(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<Account<MasterEditionV2>> {
  const maybeAccount = await context.rpc.getAccount(address);
  assertAccountExists(maybeAccount, 'MasterEditionV2');
  return deserializeMasterEditionV2(context, maybeAccount);
}

export async function safeFetchMasterEditionV2(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<Account<MasterEditionV2> | null> {
  const maybeAccount = await context.rpc.getAccount(address);
  return maybeAccount.exists
    ? deserializeMasterEditionV2(context, maybeAccount)
    : null;
}

export function deserializeMasterEditionV2(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Account<MasterEditionV2> {
  return deserializeAccount(rawAccount, getMasterEditionV2Serializer(context));
}

export function getMasterEditionV2Serializer(
  context: Pick<Context, 'serializer'>
): Serializer<MasterEditionV2Args, MasterEditionV2> {
  const s = context.serializer;
  return s.struct<MasterEditionV2>(
    [
      ['key', getKeySerializer(context)],
      ['supply', s.u64],
      ['maxSupply', s.option(s.u64)],
    ],
    'MasterEditionV2'
  ) as Serializer<MasterEditionV2Args, MasterEditionV2>;
}
