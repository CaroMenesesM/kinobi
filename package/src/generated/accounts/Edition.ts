/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Key, getKeySerializer } from '../types';
import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
} from '@lorisleiva/js-core';

export type Edition = { key: Key; parent: PublicKey; edition: bigint };

export async function fetchEdition(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<Account<Edition>> {
  const maybeAccount = await context.rpc.getAccount(address);
  assertAccountExists(maybeAccount, 'Edition');
  return deserializeEdition(context, maybeAccount);
}

export async function safeFetchEdition(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<Account<Edition> | null> {
  const maybeAccount = await context.rpc.getAccount(address);
  return maybeAccount.exists ? deserializeEdition(context, maybeAccount) : null;
}

export function deserializeEdition(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Account<Edition> {
  return deserializeAccount(rawAccount, getEditionSerializer(context));
}

export function getEditionSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<Edition> {
  const s = context.serializer;
  return s.struct<Edition>(
    [
      ['key', getKeySerializer(context)],
      ['parent', s.publicKey],
      ['edition', s.u64],
    ],
    'Edition'
  );
}
