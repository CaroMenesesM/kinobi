/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { TmKey, getTmKeySerializer } from '../types';
import {
  Account,
  Context,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  mapSerializer,
} from '@lorisleiva/js-core';

export type UseAuthorityRecord = Account<UseAuthorityRecordAccountData>;

export type UseAuthorityRecordAccountData = {
  key: TmKey;
  allowedUses: bigint;
  bump: number;
};

export type UseAuthorityRecordAccountArgs = {
  allowedUses: number | bigint;
  bump: number;
};

export async function fetchUseAuthorityRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<UseAuthorityRecord> {
  const maybeAccount = await context.rpc.getAccount(address);
  assertAccountExists(maybeAccount, 'UseAuthorityRecord');
  return deserializeUseAuthorityRecord(context, maybeAccount);
}

export async function safeFetchUseAuthorityRecord(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<UseAuthorityRecord | null> {
  const maybeAccount = await context.rpc.getAccount(address);
  return maybeAccount.exists
    ? deserializeUseAuthorityRecord(context, maybeAccount)
    : null;
}

export function deserializeUseAuthorityRecord(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): UseAuthorityRecord {
  return deserializeAccount(
    rawAccount,
    getUseAuthorityRecordAccountDataSerializer(context)
  );
}

export function getUseAuthorityRecordAccountDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<UseAuthorityRecordAccountArgs, UseAuthorityRecordAccountData> {
  const s = context.serializer;
  return mapSerializer<
    UseAuthorityRecordAccountArgs,
    UseAuthorityRecordAccountData,
    UseAuthorityRecordAccountData
  >(
    s.struct<UseAuthorityRecordAccountData>(
      [
        ['key', getTmKeySerializer(context)],
        ['allowedUses', s.u64],
        ['bump', s.u8],
      ],
      'UseAuthorityRecord'
    ),
    (value) => ({ key: 8, ...value } as UseAuthorityRecordAccountData)
  ) as Serializer<UseAuthorityRecordAccountArgs, UseAuthorityRecordAccountData>;
}

export function getUseAuthorityRecordSize(
  context: Pick<Context, 'serializer'>
): number | null {
  return getUseAuthorityRecordAccountDataSerializer(context).fixedSize;
}
