/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Collection,
  CollectionArgs,
  CollectionDetails,
  CollectionDetailsArgs,
  Data,
  DataArgs,
  DelegateState,
  ProgrammableConfig,
  TmKey,
  TokenStandard,
  Uses,
  UsesArgs,
  getCollectionDetailsSerializer,
  getCollectionSerializer,
  getDataSerializer,
  getDelegateStateSerializer,
  getProgrammableConfigSerializer,
  getTmKeySerializer,
  getTokenStandardSerializer,
  getUsesSerializer,
} from '../types';
import {
  Account,
  Context,
  Option,
  PublicKey,
  RpcAccount,
  Serializer,
  assertAccountExists,
  deserializeAccount,
  mapSerializer,
} from '@lorisleiva/js-core';

export type Metadata = {
  key: TmKey;
  updateAuthority: PublicKey;
  mint: PublicKey;
  data: Data;
  primarySaleHappened: boolean;
  isMutable: boolean;
  editionNonce: Option<number>;
  tokenStandard: Option<TokenStandard>;
  collection: Option<Collection>;
  uses: Option<Uses>;
  collectionDetails: Option<CollectionDetails>;
  programmableConfig: Option<ProgrammableConfig>;
  delegateState: Option<DelegateState>;
};
export type MetadataArgs = {
  updateAuthority: PublicKey;
  mint: PublicKey;
  data: DataArgs;
  primarySaleHappened: boolean;
  isMutable: boolean;
  editionNonce: Option<number>;
  tokenStandard: Option<TokenStandard>;
  collection: Option<CollectionArgs>;
  uses: Option<UsesArgs>;
  collectionDetails: Option<CollectionDetailsArgs>;
  programmableConfig: Option<ProgrammableConfig>;
  delegateState: Option<DelegateState>;
};

export async function fetchMetadata(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<Account<Metadata>> {
  const maybeAccount = await context.rpc.getAccount(address);
  assertAccountExists(maybeAccount, 'Metadata');
  return deserializeMetadata(context, maybeAccount);
}

export async function safeFetchMetadata(
  context: Pick<Context, 'rpc' | 'serializer'>,
  address: PublicKey
): Promise<Account<Metadata> | null> {
  const maybeAccount = await context.rpc.getAccount(address);
  return maybeAccount.exists
    ? deserializeMetadata(context, maybeAccount)
    : null;
}

export function deserializeMetadata(
  context: Pick<Context, 'serializer'>,
  rawAccount: RpcAccount
): Account<Metadata> {
  return deserializeAccount(rawAccount, getMetadataSerializer(context));
}

export function getMetadataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<MetadataArgs, Metadata> {
  const s = context.serializer;
  return mapSerializer<MetadataArgs, Metadata, Metadata>(
    s.struct<Metadata>(
      [
        ['key', getTmKeySerializer(context)],
        ['updateAuthority', s.publicKey],
        ['mint', s.publicKey],
        ['data', getDataSerializer(context)],
        ['primarySaleHappened', s.bool],
        ['isMutable', s.bool],
        ['editionNonce', s.option(s.u8)],
        ['tokenStandard', s.option(getTokenStandardSerializer(context))],
        ['collection', s.option(getCollectionSerializer(context))],
        ['uses', s.option(getUsesSerializer(context))],
        [
          'collectionDetails',
          s.option(getCollectionDetailsSerializer(context)),
        ],
        [
          'programmableConfig',
          s.option(getProgrammableConfigSerializer(context)),
        ],
        ['delegateState', s.option(getDelegateStateSerializer(context))],
      ],
      'Metadata'
    ),
    (value) => ({ key: 1, ...value } as Metadata)
  ) as Serializer<MetadataArgs, Metadata>;
}
