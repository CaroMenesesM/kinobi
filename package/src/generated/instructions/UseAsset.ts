/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Signer,
  WrappedInstruction,
  getProgramAddressWithFallback,
  mapSerializer,
} from '@lorisleiva/js-core';
import {
  UseAssetArgs,
  UseAssetArgsArgs,
  getUseAssetArgsSerializer,
} from '../types';

// Accounts.
export type UseAssetInstructionAccounts = {
  /** Metadata account */
  metadata: PublicKey;
  /** Token Account Of NFT */
  tokenAccount: PublicKey;
  /** Mint of the Metadata */
  mint: PublicKey;
  /** Use authority or current owner of the asset */
  useAuthority: Signer;
  /** Owner */
  owner: PublicKey;
  /** SPL Token program */
  splTokenProgram?: PublicKey;
  /** Associated Token program */
  ataProgram?: PublicKey;
  /** System program */
  systemProgram?: PublicKey;
  /** Use Authority Record PDA (if present the program assumes a delegated use authority) */
  useAuthorityRecord?: PublicKey;
  /** Token Authorization Rules account */
  authorizationRules?: PublicKey;
  /** Token Authorization Rules Program */
  authorizationRulesProgram?: PublicKey;
};

// Arguments.
export type UseAssetInstructionData = {
  discriminator: number;
  useAssetArgs: UseAssetArgs;
};
export type UseAssetInstructionArgs = { useAssetArgs: UseAssetArgsArgs };

export function getUseAssetInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<UseAssetInstructionArgs, UseAssetInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    UseAssetInstructionArgs,
    UseAssetInstructionData,
    UseAssetInstructionData
  >(
    s.struct<UseAssetInstructionData>(
      [
        ['discriminator', s.u8],
        ['useAssetArgs', getUseAssetArgsSerializer(context)],
      ],
      'UseAssetInstructionArgs'
    ),
    (value) => ({ discriminator: 45, ...value })
  ) as Serializer<UseAssetInstructionArgs, UseAssetInstructionData>;
}

// Instruction.
export function useAsset(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    programs?: Context['programs'];
  },
  input: UseAssetInstructionAccounts & UseAssetInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'mplDigitalAsset',
    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'
  );

  // Metadata.
  keys.push({ pubkey: input.metadata, isSigner: false, isWritable: false });

  // Token Account.
  keys.push({ pubkey: input.tokenAccount, isSigner: false, isWritable: false });

  // Mint.
  keys.push({ pubkey: input.mint, isSigner: false, isWritable: false });

  // Use Authority.
  signers.push(input.useAuthority);
  keys.push({
    pubkey: input.useAuthority.publicKey,
    isSigner: true,
    isWritable: false,
  });

  // Owner.
  keys.push({ pubkey: input.owner, isSigner: false, isWritable: false });

  // Spl Token Program.
  keys.push({
    pubkey:
      input.splTokenProgram ??
      getProgramAddressWithFallback(
        context,
        'splToken',
        'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'
      ),
    isSigner: false,
    isWritable: false,
  });

  // Ata Program.
  keys.push({
    pubkey:
      input.ataProgram ??
      getProgramAddressWithFallback(
        context,
        'splAssociatedToken',
        'TokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'
      ),
    isSigner: false,
    isWritable: false,
  });

  // System Program.
  keys.push({
    pubkey:
      input.systemProgram ??
      getProgramAddressWithFallback(
        context,
        'splSystem',
        '11111111111111111111111111111111'
      ),
    isSigner: false,
    isWritable: false,
  });

  // Use Authority Record (optional).
  if (input.useAuthorityRecord) {
    keys.push({
      pubkey: input.useAuthorityRecord,
      isSigner: false,
      isWritable: false,
    });
  }

  // Authorization Rules (optional).
  if (input.authorizationRules) {
    keys.push({
      pubkey: input.authorizationRules,
      isSigner: false,
      isWritable: false,
    });
  }

  // Authorization Rules Program (optional).
  if (input.authorizationRulesProgram) {
    keys.push({
      pubkey: input.authorizationRulesProgram,
      isSigner: false,
      isWritable: false,
    });
  }

  // Data.
  const data = getUseAssetInstructionDataSerializer(context).serialize(input);

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
