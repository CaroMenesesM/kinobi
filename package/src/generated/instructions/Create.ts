/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  AccountMeta,
  Context,
  PublicKey,
  Serializer,
  Signer,
  WrappedInstruction,
  checkForIsWritableOverride as isWritable,
  getProgramAddressWithFallback,
  mapSerializer,
} from '@lorisleiva/js-core';
import { TaCreateArgs, getTaCreateArgsSerializer } from '../types';

// Accounts.
export type CreateInstructionAccounts = {
  /** Payer and creator of the RuleSet */
  payer?: Signer;
  /** The PDA account where the RuleSet is stored */
  ruleSetPda: PublicKey;
  /** System program */
  systemProgram?: PublicKey;
};

// Arguments.
export type CreateInstructionData = {
  discriminator: number;
  createArgs: TaCreateArgs;
};

export type CreateInstructionArgs = { createArgs: TaCreateArgs };

export function getCreateInstructionDataSerializer(
  context: Pick<Context, 'serializer'>
): Serializer<CreateInstructionArgs, CreateInstructionData> {
  const s = context.serializer;
  return mapSerializer<
    CreateInstructionArgs,
    CreateInstructionData,
    CreateInstructionData
  >(
    s.struct<CreateInstructionData>(
      [
        ['discriminator', s.u8],
        ['createArgs', getTaCreateArgsSerializer(context)],
      ],
      'CreateInstructionArgs'
    ),
    (value) => ({ discriminator: 0, ...value } as CreateInstructionData)
  ) as Serializer<CreateInstructionArgs, CreateInstructionData>;
}

// Instruction.
export function create(
  context: {
    serializer: Context['serializer'];
    eddsa: Context['eddsa'];
    payer: Context['payer'];
    programs?: Context['programs'];
  },
  input: CreateInstructionAccounts & CreateInstructionArgs
): WrappedInstruction {
  const signers: Signer[] = [];
  const keys: AccountMeta[] = [];

  // Program ID.
  const programId: PublicKey = getProgramAddressWithFallback(
    context,
    'mplTokenAuthRules',
    'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'
  );

  // Resolved accounts.
  const payerAccount = input.payer ?? context.payer.publicKey;
  const ruleSetPdaAccount = input.ruleSetPda;
  const systemProgramAccount = input.systemProgram ?? {
    ...getProgramAddressWithFallback(
      context,
      'splSystem',
      '11111111111111111111111111111111'
    ),
    isWritable: false,
  };

  // Payer.
  signers.push(payerAccount);
  keys.push({
    pubkey: payerAccount.publicKey,
    isSigner: true,
    isWritable: isWritable(payerAccount, true),
  });

  // Rule Set Pda.
  keys.push({
    pubkey: ruleSetPdaAccount,
    isSigner: false,
    isWritable: isWritable(ruleSetPdaAccount, true),
  });

  // System Program.
  keys.push({
    pubkey: systemProgramAccount,
    isSigner: false,
    isWritable: isWritable(systemProgramAccount, false),
  });

  // Data.
  const data = getCreateInstructionDataSerializer(context).serialize(input);

  return {
    instruction: { keys, programId, data },
    signers,
    bytesCreatedOnChain: 0,
  };
}
