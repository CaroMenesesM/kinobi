{% import "templates/macros.njk" as macros %}

{% if hasVariableSeeds %}
export type {{ pascalCaseName }}Seeds = {
  {% for seed in seeds %}
    {% if seed.kind === 'variable' %}
      {{ macros.docblock(seed.docs) }}
      {{ seed.name | camelCase }}: {{ seed.typeManifest.looseType.render }};
    {% endif %}
  {% endfor %}
}
{% endif %}

export async function find{{ pascalCaseName }}Pda(
  {% if hasVariableSeeds %}
    seeds: {{ pascalCaseName }}Seeds,
  {% endif %}
  config: { programAddress?: Address | undefined } = {},
): Promise<ProgramDerivedAddress> {
  const { programAddress = '{{ program.publicKey }}' as Address<'{{ program.publicKey }}'> } = config;
  return getProgramDerivedAddress({ programAddress, seeds: [
    {% for seed in seeds %}
      {% if seed.kind === 'programId' %}
        getAddressEncoder().encode(programAddress),
      {% elif seed.kind === 'constant' %}
        {{ seed.typeManifest.encoder.render }}.encode({{ seed.value.render }}),
      {% else %}
        {{ seed.typeManifest.encoder.render }}.encode(seeds.{{ seed.name | camelCase }}),
      {% endif %}
    {% endfor %}
  ]});
}

export async function fetch{{ pascalCaseName }}FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  {% if hasVariableSeeds %}
    seeds: {{ pascalCaseName }}Seeds,
  {% endif %}
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<{{ pascalCaseName }}> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await find{{ pascalCaseName }}Pda({% if hasVariableSeeds %}seeds, {% endif %}{ programAddress });
  return fetch{{ pascalCaseName }}(rpc, address, fetchConfig);
}

export async function safeFetch{{ pascalCaseName }}FromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  {% if hasVariableSeeds %}
    seeds: {{ pascalCaseName }}Seeds,
  {% endif %}
  config: FetchAccountConfig & { programAddress?: Address } = {},
): Promise<{{ pascalCaseName }} | null> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await find{{ pascalCaseName }}Pda({% if hasVariableSeeds %}seeds, {% endif %}{ programAddress });
  return safeFetch{{ pascalCaseName }}(rpc, address, fetchConfig);
}
